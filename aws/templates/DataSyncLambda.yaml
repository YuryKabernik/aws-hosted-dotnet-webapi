AWSTemplateFormatVersion: "2010-09-09"
Description: A template for CloudX training

Parameters:
  BucketNameParameter:
    Type: String
    Default: s3-cloudx-images-store

  DatabaseUserNameParameter:
    Type: String
    Description: PostgresSQL username for database connection.
    Default: postgres

  DatabaseUserPasswordParameter:
    Type: String
    Description: PostgresSQL password for database connection.
    Default: Mwb5KIdk4igOpUlpbsCV

  LambdaDataConsistencyRoleParameter:
    Type: String
    Description: Allows Lambda functions to call RDS and S3 services to synchronize images and metadata
    Default: arn:aws:iam::905418123070:role/CloudX-LambdaConsistencyRole

Resources:
  # VPC Setup

  VPCYury:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: dotnet-webapi-Network
        - Key: project
          Value: cloudx

  # Private Subnets

  PrivateSubnetAYury:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCYury
      CidrBlock: 10.0.13.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: dotnet-webapi-PrivateSubnet-A
        - Key: project
          Value: cloudx

  PrivateSubnetBYury:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCYury
      CidrBlock: 10.0.14.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: dotnet-webapi-PrivateSubnet-B
        - Key: project
          Value: cloudx

  # Private Subnet Routing

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCYury
      Tags:
        - Key: Name
          Value: dotnet-webapi-PrivateRouteTable
        - Key: project
          Value: cloudx

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetAYury
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetBYury
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId: !Ref VPCYury

  SecurityGroupIngressPostgresSql:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DatabaseSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref DatabaseSecurityGroup

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId: !Ref VPCYury

  SecurityGroupEgressLambdaGroup:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: "-1"
      FromPort: 0
      ToPort: 65535
      CidrIp: 0.0.0.0/0

  # S3 bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Ref BucketNameParameter
      Tags:
        - Key: project
          Value: cloudx

  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPCYury
      VpcEndpointType: "Gateway"
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref PrivateRouteTable

  # DB Subnet Group

  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: A group describing all subnets for BD instance allocation
      SubnetIds:
        - !Ref PrivateSubnetAYury
        - !Ref PrivateSubnetBYury
      Tags:
        - Key: Name
          Value: dotnet-DbSubnetGroup

  # DB Instance

  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBName: ImagesMetadata
      DBInstanceClass: db.t4g.micro
      DBSubnetGroupName: !Ref DbSubnetGroup
      Engine: postgres
      StorageType: gp3
      AllocatedStorage: "20"
      DBInstanceIdentifier: database-1
      MasterUsername: !Ref DatabaseUserNameParameter
      MasterUserPassword: !Ref DatabaseUserPasswordParameter
      AutoMinorVersionUpgrade: false
      DeleteAutomatedBackups: true
      PubliclyAccessible: false
      BackupRetentionPeriod: 0
      MultiAZ: false
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup

  # Lambda

  LambdaDataConsistencyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: dotnet-webapi-DataConsistencyFunction
      Role: !Ref LambdaDataConsistencyRoleParameter
      Runtime: dotnet8
      MemorySize: 512
      Timeout: 30
      PackageType: Zip
      Handler: DataConsistencyFunction
      Code:
        S3Bucket: s3-dotnet-webapi-functions
        S3Key: DataConsistencyFunction.zip
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3Bucket
          Postgres: !Sub "Host=${DatabaseInstance.Endpoint.Address};Database=ImagesMetadata;Port=5432;Username=${DatabaseUserNameParameter};Password=${DatabaseUserPasswordParameter};"
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - !Ref DatabaseSecurityGroup
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnetAYury
          - !Ref PrivateSubnetBYury

  # Event Run Every 5 Minutes
  DataConsistencyCheckEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: ScheduledConsistencyCheckRule
      ScheduleExpression: "rate(5 minutes)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaDataConsistencyFunction.Arn
          Id: !Ref LambdaDataConsistencyFunction

  # Permissions

  AllowInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaDataConsistencyFunction.Arn
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt DataConsistencyCheckEventRule.Arn
