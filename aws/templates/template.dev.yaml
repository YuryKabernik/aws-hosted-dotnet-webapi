AWSTemplateFormatVersion: "2010-09-09"

Description: A template for CloudX training

Parameters:
  MyIpParameter:
    Type: String
    Description: Your local IP address to connect to EC2 via SSH
    Default: 188.123.143.113/32

  AmiIdParameter:
    Type: String
    Description: The previously created AMI with dotnet WebAPI setup
    Default: ami-028eed826eea4fac2

  InstanceTypeParameter:
    Type: String
    Description: The instance type to run the selected AMI
    Default: t2.micro

  KeyPairIdParameter:
    Type: String
    Description: The Key Pair name required to connect to the instance
    Default: AWS-UserGuide-Key

  InstanceProfileArnParameter:
    Type: String
    Description: The ARN of an instance profile to use with EC2 instances
    Default: arn:aws:iam::905418123070:instance-profile/CloudX-FullAccessRoleS3

  BucketNameParameter:
    Type: String
    Default: s3-cloudx-images-store

  DatabaseUserNameParameter:
    Type: String
    Description: PostgreSQL username for database connection.
    Default: postgres

  DatabaseUserPasswordParameter:
    Type: String
    Description: PostgreSQL password for database connection.
    Default: Mwb5KIdk4igOpUlpbsCV

  LambdaNotificatorRoleParameter:
    Type: String
    Description: Allows Lambda functions to call SQS and SNS services
    Default: arn:aws:iam::905418123070:role/CloudX-LambdaNotificatorRole

  LambdaDataConsistencyRoleParameter:
    Type: String
    Description: Allows Lambda functions to call RDS and S3 services to synchronize images and metadata
    Default: arn:aws:iam::905418123070:role/CloudX-LambdaConsistencyRole

  LambdaS3LoggerRoleParameter:
    Type: String
    Description: Allows Lambda functions to call RDS and S3 services to synchronize images and metadata
    Default: arn:aws:iam::905418123070:role/CloudX-S3LoggerRole

Resources:
  # S3 Setup
  S3BucketYury:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Ref BucketNameParameter
      # NotificationConfiguration:
      #   LambdaConfigurations:
      #     - Function: !GetAtt LambdaS3LogsFunction.Arn
      #       Event: s3:ObjectCreated:Put
      Tags:
        - Key: project
          Value: cloudx

  # VPC Setup
  VPCYury:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: dotnet-webapi-Network
        - Key: project
          Value: cloudx

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: dotnet-webapi-InternetGateway
        - Key: project
          Value: cloudx

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCYury
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetAYury:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCYury
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: dotnet-webapi-PublicSubnet-A
        - Key: project
          Value: cloudx

  PublicSubnetBYury:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCYury
      CidrBlock: 10.0.12.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: dotnet-webapi-PublicSubnet-B
        - Key: project
          Value: cloudx

  PrivateSubnetAYury:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCYury
      CidrBlock: 10.0.13.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: dotnet-webapi-PrivateSubnet-A
        - Key: project
          Value: cloudx

  PrivateSubnetBYury:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCYury
      CidrBlock: 10.0.14.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: dotnet-webapi-PrivateSubnet-B
        - Key: project
          Value: cloudx

  # Public Subnet Routing Setup
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCYury
      Tags:
        - Key: Name
          Value: dotnet-webapi-PublicRouteTable
        - Key: project
          Value: cloudx

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetAYury
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetBYury
      RouteTableId: !Ref PublicRouteTable

  # Private Subnet Routing Setup
  PrivateRouteTable:
   Type: AWS::EC2::RouteTable
   Properties:
     VpcId: !Ref VPCYury
     Tags:
       - Key: Name
         Value: dotnet-webapi-PrivateRouteTable
       - Key: project
         Value: cloudx
  
  PrivateRoute:
   Type: AWS::EC2::Route
   DependsOn: InternetGatewayAttachment
   Properties:
     RouteTableId: !Ref PrivateRouteTable
     DestinationCidrBlock: 0.0.0.0/0
  
  PrivateSubnetARouteTableAssociation:
   Type: AWS::EC2::SubnetRouteTableAssociation
   Properties:
     SubnetId: !Ref PrivateSubnetAYury
     RouteTableId: !Ref PrivateRouteTable
  
  PrivateSubnetBRouteTableAssociation:
   Type: AWS::EC2::SubnetRouteTableAssociation
   Properties:
     SubnetId: !Ref PrivateSubnetBYury
     RouteTableId: !Ref PrivateRouteTable

  # Security Group Setup - EC2

  SecurityGroupEC2Access:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCYury
      GroupName: dotnet-webapi-SecGr1
      GroupDescription: Public access to EC2 instances
      Tags:
        - Key: project
          Value: cloudx

  SecurityGroupIngressHttpsYury:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
      GroupId: !Ref SecurityGroupEC2Access

  SecurityGroupIngressHttpYury:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
      GroupId: !Ref SecurityGroupEC2Access

  SecurityGroupIngressSshYury:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref MyIpParameter
      GroupId: !Ref SecurityGroupEC2Access

  # Security Group Setup - RDS

  SecurityGroupRDSAccess:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCYury
      GroupName: dotnet-webapi-SecGrRds
      GroupDescription: Private access to RDS instances
      Tags:
        - Key: project
          Value: cloudx

  SecurityGroupIngressPostgresSql:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref SecurityGroupEC2Access
      GroupId: !Ref SecurityGroupRDSAccess

  SecurityGroupIngressPostgresSqlYury:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      CidrIp: !Ref MyIpParameter
      GroupId: !Ref SecurityGroupRDSAccess

  # EC2 Launch Template
  EC2LaunchTemplateWebApi:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: dotnet-webapi-LaunchTemplate
      LaunchTemplateData:
        ImageId: !Ref AmiIdParameter
        InstanceType: !Ref InstanceTypeParameter
        KeyName: !Ref KeyPairIdParameter
        IamInstanceProfile:
          Arn: !Ref InstanceProfileArnParameter
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref SecurityGroupEC2Access

  # EC2 Auto Scaling Group
  AutoScalingGroupYury:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: InternetGatewayAttachment
    Properties:
      AutoScalingGroupName: dotnet-webapi-AutoScalingGroup
      DefaultInstanceWarmup: 90
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplateWebApi
        Version: !GetAtt EC2LaunchTemplateWebApi.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref PublicSubnetAYury
        - !Ref PublicSubnetBYury
      TargetGroupARNs:
        - !Ref TargetGroupWebApi
      MaxSize: "3"
      MinSize: "1"
      DesiredCapacity: "1"

  CpuUsageScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroupYury
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50

  # EC2 Application Load Balancer

  ApplicationLoadBalancerYury:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: InternetGateway
    Properties:
      Type: application
      Scheme: internet-facing
      Name: dotnet-webapi-LoadBalancer
      SecurityGroups:
        - !Ref SecurityGroupEC2Access
      Subnets:
        - !Ref PublicSubnetAYury
        - !Ref PublicSubnetBYury

  ListenerWebApi:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupWebApi
      LoadBalancerArn: !Ref ApplicationLoadBalancerYury

  TargetGroupWebApi:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCYury
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckPort: "80"
      HealthyThresholdCount: 4
      Protocol: HTTP
      Port: 80
      Tags:
        - Key: Name
          Value: dotnet-webapi-TargetGroup
        - Key: project
          Value: cloudx

  # DB Subnet Group

  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: A group describing all subnets for BD instance allocation
      SubnetIds:
        - !Ref PrivateSubnetAYury
        - !Ref PrivateSubnetBYury
      Tags:
        - Key: Name
          Value: dotnet-DbSubnetGroup

  # DB Instance

  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBName: ImagesMetadata
      DBInstanceClass: db.t4g.micro
      DBSubnetGroupName: !Ref DbSubnetGroup
      Engine: postgres
      StorageType: gp3
      AllocatedStorage: "20"
      DBInstanceIdentifier: database-1
      MasterUsername: !Ref DatabaseUserNameParameter
      MasterUserPassword: !Ref DatabaseUserPasswordParameter
      AutoMinorVersionUpgrade: false
      PubliclyAccessible: true
      MultiAZ: false
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      VPCSecurityGroups:
        - !Ref SecurityGroupRDSAccess

  # Simple Queue Service

  UploadsNotificationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: dotnet-webapi-UploadsNotificationQueue
      Tags:
        - Key: project
          Value: cloudx

  # Simple Notification Service

  UploadsNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "CloudX SNS Upload"
      TopicName: dotnet-webapi-UploadsNotificationTopic
      Tags:
        - Key: project
          Value: cloudx

  # Lambda Functions
  LambdaUploadsNotificationFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - UploadsNotificationQueue
      - UploadsNotificationTopic
    Properties:
      FunctionName: dotnet-webapi-UploadsNotificationFunction
      Role: !Ref LambdaNotificatorRoleParameter
      Runtime: dotnet8
      MemorySize: 512
      Timeout: 30
      PackageType: Zip
      Handler: LambdaSnsSqsNotification
      Code:
        S3Bucket: s3-dotnet-webapi-functions
        S3Key: UploadsNotificationFunction.zip
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref UploadsNotificationTopic
      TracingConfig:
        Mode: Active
  
  LambdaUploadsNotificationFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !GetAtt LambdaUploadsNotificationFunction.Arn
      EventSourceArn: !GetAtt UploadsNotificationQueue.Arn
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 50

  LambdaDataConsistencyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: dotnet-webapi-DataConsistencyFunction
      Role: !Ref LambdaDataConsistencyRoleParameter
      Runtime: dotnet8
      MemorySize: 512
      Timeout: 30
      PackageType: Zip
      Handler: DataConsistencyFunction
      Code:
        S3Bucket: s3-dotnet-webapi-functions
        S3Key: DataConsistencyFunction.zip
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3BucketYury
          PGHOST: !GetAtt DatabaseInstance.Endpoint.Address
          PGDATABASE: ImagesMetadata
          PGUSER: !Ref DatabaseUserNameParameter
          PGPASSWORD:	!Ref DatabaseUserPasswordParameter
      TracingConfig:
        Mode: Active

  LambdaS3LogsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: dotnet-webapi-S3LogsFunction
      Role: !Ref LambdaS3LoggerRoleParameter
      Runtime: dotnet8
      MemorySize: 512
      Timeout: 30
      PackageType: Zip
      Handler: S3LogsFunction
      Code:
        S3Bucket: s3-dotnet-webapi-functions
        S3Key: S3LogsFunction.zip
      TracingConfig:
        Mode: Active

  # Lambda Permissions

  AllowS3ToCallLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaS3LogsFunction.Arn
      Principal: 's3.amazonaws.com'
      SourceArn: !GetAtt S3Bucket.Arn
